<?php



class Venta extends MainModel

{

    protected $table = self::tablaVenta;

    public $primaryKey = "id_venta";

    const tpVenta = "venta";

    const tpCompra = "compra";

    const tpIngreso = "ingreso";

    const tpIngresoTraspaso = "Ingreso_(traspaso)";

    const tpTraspaso = "traspaso";

    const estadoEspera = "comprado";

    const estadoEnviado = "despachado";

    const ventaMayorista = "Mayorista";

    const presupuesto = "Presupuesto Publico";

    const presupuesto_mayorista = "Presupuesto Mayorista";

    public static $_tipoVenta = array(self::ventaMayorista, "Publico", self::presupuesto, self::presupuesto_mayorista);



    public function hasLineaVenta()

    {

        return $this->hasMany(LineaVenta::class, $this->primaryKey, $this->primaryKey);

    }



    public function hasUsuario()

    {

        return $this->hasOne(Usuario::class, ($key = "id_usuario"), $key);

    }



    public function hasCliente()

    {

        return $this->hasOne(Persona::class, "id", "id_cliente");

    }



    public function hasPago()

    {

        return $this->hasMany(Movimiento::class, "id_operacion", $this->primaryKey);

    }



    static public function nextIdVenta()

    {

        return floatval(self::max("id_venta") + 1);

    }



    public function getTotalAttribute()

    {

        if ( !($total = floatval($this->hasLineaVenta()->sum('subtotal'))) )

        {

            foreach ($this->hasLineaVenta as $linea)

            {

                $precio_venta = $linea->hasArticulo->precio_venta;

                if ( $precio_venta && !floatval($linea->subtotal) )

                {

                    $linea->subtotal = ($linea->cantidad * $precio_venta);

                    $linea->save();

                    $total += $linea->subtotal;

                }

            }

        }

        return round($total,2);

    }



    public function getStrPagosAttribute()

    {

        $pagos = array();

        foreach ($this->hasPago as $pago)

        {

            $pagos[] = Concepto::get($pago->{$this->getOperacionIngresoAttribute() ? "id_concepto" : "id_cuenta"}) . " $ {$pago->importe}";

            //$pagos[] = Concepto::get($pago->{$this->getOperacionIngresoAttribute() ? "id_concepto" : "id_cuenta"});

        }

        return implode(" | ", $pagos);

    }



    public function getUsuarioAttribute()

    {

        return $this->hasUsuario->hasPersona->nombre_apellido;

    }



    public function getNombreClienteAttribute()

    {

        $nombre = $this->attributes['cliente'];

        if ( ($id_cliente = $this->attributes['id_cliente']) )

        {

            $nombre = $this->hasCliente->nombre_apellido;

            if ( $dni = trim($this->hasCliente->dni) )

            {

                $nombre .= " (DNI {$dni})";

            }

        }

        #--

        if ( $this->getEsTraspasoAttribute() )

        {

            $nombre = "Traspaso " . Local::nombreLocal($this->attributes['id_sucursal']) . " => " . Local::nombreLocal($id_cliente);

        }



        return mb_strtoupper($nombre);

    }



    public function getLocalAttribute()

    {

        return Local::$_LOCALES[$this->attributes['id_sucursal']];

    }



    public function getRazonAttribute()

    {

        switch ( $this->attributes['tipo'] )

        {

            case self::tpVenta:

                $tipo = "Egreso";

                break;

            case self::tpCompra:

                $tipo = "Ingreso";

                break;

            default:

                $tipo = "Traspaso";

        }

        return $tipo;

    }



    public function getOperacionIngresoAttribute()

    {

        return in_array(mb_strtolower($this->attributes['tipo']), [self::tpCompra, self::tpIngreso]);

    }



    public function getEsPresupuestoAttribute()

    {

        return preg_match("#" . self::presupuesto . "#i", $this->attributes['tipo']);

    }



    public function getEsTraspasoAttribute()

    {

        return preg_match("#" . self::tpTraspaso . "#i", $this->attributes['tipo']);

    }



    public function getVentaEsperaAttribute()

    {

        return ($this->attributes['estado'] == self::estadoEspera);

    }



    public function getFechaAttribute()

    {

        return HDate::dateFormat($this->attributes['fecha_hora'], HDate::FORMAT_DMY_HMS);

    }



    public function delete()

    {

        $this->hasLineaVenta()->delete();

        return parent::delete(); // TODO: Change the autogenerated stub

    }

}