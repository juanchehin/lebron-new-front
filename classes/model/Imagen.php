<?php

class Imagen extends MainModel
{
    const defaultImage = "media/image/default.jpg";
    protected $table = self::tablaImagen;
    public $primaryKey = 'id_imagen';
    static $_extensiones = array('jpg', 'jpeg', 'png', 'gif');

    public function getIdImagenAttribute()
    {
        return (string)$this->attributes[$this->primaryKey];
    }

    public function getArrCropDataAttribute()
    {
        return (array)json_decode($this->attributes['crop_data'], true);
    }

    public static function guardarImagen($id_imagen, $id_relacion, $modulo, $json_crop, $archivo = null)
    {
        $create = self::findOrNew($id_imagen);
        $create->id_relacion = $id_relacion;
        $create->entidad = mb_strtolower($modulo);
        if ( $archivo )
        {
            $create->archivo = mb_strtolower($archivo);
        }
        //$create->extension = preg_replace(".+\.", "", $create->archivo);
        $create->crop_data = $json_crop;
        $create->save();

        return $create;
    }

    public function imagePath($default = true)
    {
        $imagen = $this->attributes['archivo'];
        if ( file_exists($imagen) )
        {
            return $imagen;
        }

        return $default ? self::defaultImage : null;
    }

    public function getImageCropSrcAttribute()
    {
        return $this->getImageCropAttribute() ?: self::defaultImage;
    }

    public function getImagePathAttribute()
    {
        return $this->imagePath(false);
    }

    public function getImageCropAttribute()
    {
        $imagen = preg_replace("#(.+)(\.\w+)$#", "$1_crop$2", ($original = $this->attributes['archivo']));
        if ( !file_exists($imagen) && file_exists($original) )
        {
            $crop_data = json_decode($this->attributes['crop_data'], true);
            $crop['x1'] = $crop_data['img_coords']['x'];
            $crop['y1'] = $crop_data['img_coords']['y'];
            $crop['x2'] = $crop_data['preview_size']['width'];
            $crop['y2'] = $crop_data['preview_size']['height'];
            $crop['img_zoom'] = $crop_data['img_zoom'];
            //HArray::varDump($this->image_path);
            InputFileControl::createCrop($this->getImagePathAttribute(), $crop);
        }

        return trim($imagen);
    }

    static public function imagenesEntidad($entidad, $id_relacion = null)
    {
        $w['entidad'] = $entidad;
        if ( $id_relacion )
        {
            $w['id_relacion'] = $id_relacion;
        }

        return self::where($w)->orderBy('orden')->orderBy('id_imagen', "DESC")->get();
    }

    public function delete()
    {
        $file = preg_replace("#.\w+$#", "", $this->attributes['archivo']);
        array_map('unlink', glob($file . "*"));
        return parent::delete(); // TODO: Change the autogenerated stub
    }
}